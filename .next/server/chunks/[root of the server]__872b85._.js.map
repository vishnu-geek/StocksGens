{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/app/api/image/route.js"],"sourcesContent":["import axios from \"axios\";\nimport dotenv from \"dotenv\";\nimport { NextResponse } from \"next/server\";\n\ndotenv.config();\n\nexport async function POST(req) {\n  try {\n    const { stockName } = await req.json();\n\n    if (!stockName) {\n      return NextResponse.json(\n        { error: \"Stock name is required\" },\n        { status: 400 }\n      );\n    }\n\n    const prompt = `${stockName} logo with futuristic city, blue and purple color, neon glow, detailed, high quality. Modern, high tech, soft, bold aesthetic, using dark shades of purple, blue, and black in a gradient`;\n\n    // Generate image request to BFL API\n    const generateResponse = await axios.post(\n      \"https://api.bfl.ml/v1/flux-pro-1.1\",\n      {\n        prompt,\n        width: 896,\n        height: 1152,\n      },\n      {\n        headers: {\n          accept: \"application/json\",\n          \"x-key\": process.env.BFL_API_KEY,\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    const requestId = generateResponse.data.id;\n\n    if (!requestId) {\n      return NextResponse.json(\n        { error: \"No request ID received from BFL API\" },\n        { status: 500 }\n      );\n    }\n\n    let imageUrl = null;\n    let status = \"Processing\";\n\n    // Poll the result from BFL API until the image is ready\n    while (status !== \"Ready\") {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      const resultResponse = await axios.get(\n        `https://api.bfl.ml/v1/get_result?id=${requestId}`,\n        {\n          headers: {\n            accept: \"application/json\",\n            \"x-key\": process.env.BFL_API_KEY,\n          },\n        }\n      );\n\n      status = resultResponse.data.status;\n      if (status === \"Ready\") {\n        imageUrl = resultResponse.data.result?.sample || null;\n      }\n    }\n\n    if (imageUrl) {\n      return NextResponse.json({ imageUrl }, { status: 200 });\n    } else {\n      return NextResponse.json(\n        { error: \"Failed to retrieve the image URL\" },\n        { status: 500 }\n      );\n    }\n  } catch (error) {\n    console.error(\"Error generating or fetching image:\", error.message);\n    return NextResponse.json(\n      { error: \"Failed to generate or retrieve image\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AACA;AACA;AAFA;;;;AAIA,uIAAA,CAAA,UAAM,CAAC,MAAM;AAEN,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,IAAI;QAEpC,IAAI,CAAC,WAAW;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,GAAG,UAAU,yLAAyL,CAAC;QAEtN,oCAAoC;QACpC,MAAM,mBAAmB,MAAM,uIAAA,CAAA,UAAK,CAAC,IAAI,CACvC,sCACA;YACE;YACA,OAAO;YACP,QAAQ;QACV,GACA;YACE,SAAS;gBACP,QAAQ;gBACR,SAAS,QAAQ,GAAG,CAAC,WAAW;gBAChC,gBAAgB;YAClB;QACF;QAGF,MAAM,YAAY,iBAAiB,IAAI,CAAC,EAAE;QAE1C,IAAI,CAAC,WAAW;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsC,GAC/C;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,WAAW;QACf,IAAI,SAAS;QAEb,wDAAwD;QACxD,MAAO,WAAW,QAAS;YACzB,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;YACnD,MAAM,iBAAiB,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CACpC,CAAC,oCAAoC,EAAE,WAAW,EAClD;gBACE,SAAS;oBACP,QAAQ;oBACR,SAAS,QAAQ,GAAG,CAAC,WAAW;gBAClC;YACF;YAGF,SAAS,eAAe,IAAI,CAAC,MAAM;YACnC,IAAI,WAAW,SAAS;gBACtB,WAAW,eAAe,IAAI,CAAC,MAAM,EAAE,UAAU;YACnD;QACF;QAEA,IAAI,UAAU;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE;YAAS,GAAG;gBAAE,QAAQ;YAAI;QACvD,OAAO;YACL,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmC,GAC5C;gBAAE,QAAQ;YAAI;QAElB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uCAAuC,MAAM,OAAO;QAClE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAuC,GAChD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}