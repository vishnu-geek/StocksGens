{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/app/api/prompt/route.js"],"sourcesContent":["import { OpenAI } from \"openai\";\nimport dotenv from \"dotenv\";\nimport { NextResponse } from \"next/server\";\n\ndotenv.config();\n\nconst openai = new OpenAI({\n  apiKey: process.env.API_KEY,\n});\n\nexport async function POST(req) {\n  try {\n    const { prompt } = await req.json();\n\n    if (!prompt) {\n      return NextResponse.json(\n        { error: \"Prompt is required\" },\n        { status: 400 }\n      );\n    }\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [{ role: \"user\", content: prompt }],\n    });\n\n    return NextResponse.json(\n      { response: response.choices[0].message.content },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n    return NextResponse.json(\n      { error: \"Failed to get GPT response\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AACA;AACA;AAFA;;;;AAIA,uIAAA,CAAA,UAAM,CAAC,MAAM;AAEb,MAAM,SAAS,IAAI,kJAAA,CAAA,SAAM,CAAC;IACxB,QAAQ,QAAQ,GAAG,CAAC,OAAO;AAC7B;AAEO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,IAAI;QAEjC,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqB,GAC9B;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,WAAW,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACpD,OAAO;YACP,UAAU;gBAAC;oBAAE,MAAM;oBAAQ,SAAS;gBAAO;aAAE;QAC/C;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,UAAU,SAAS,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO;QAAC,GAChD;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,UAAU,MAAM,OAAO;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}