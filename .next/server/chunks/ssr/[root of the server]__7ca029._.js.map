{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/components/fancy-dark-loading.tsx"],"sourcesContent":["\"use client\";\n\nimport { Loader2 } from \"lucide-react\";\n\nexport default function Component() {\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-black text-white\">\n      <div className=\"w-64 text-center\">\n        <div className=\"relative\">\n          <Loader2\n            className=\"w-24 h-24 animate-spin text-blue-500 mx-auto mb-4\"\n            aria-hidden=\"true\"\n          />\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"text-2xl font-bold text-blue-300\">\n              {/* {Math.round(progress)}% */}\n            </div>\n          </div>\n        </div>\n        <h1 className=\"text-3xl font-bold mb-2 text-blue-300\">Loading...</h1>\n        <p className=\"text-gray-400 mb-4\">\n          Preparing your presentation, This may take a while\n        </p>\n        {/* <Progress value={progress} className=\"w-full h-2 bg-gray-700\" /> */}\n        <style jsx>{`\n          .progress-indicator {\n            background-color: #8b5cf6;\n          }\n        `}</style>\n        <div className=\"mt-8 space-y-2\">\n          <div className=\"h-2 w-full bg-black rounded-full overflow-hidden\">\n            <div\n              className=\"h-full bg-pink-500 rounded-full animate-pulse\"\n              style={{ width: \"75%\" }}\n            ></div>\n          </div>\n          <div className=\"h-2 w-full bg-gray-800 rounded-full overflow-hidden\">\n            <div\n              className=\"h-full bg-purple-500 rounded-full animate-pulse\"\n              style={{ width: \"55%\", animationDelay: \"0.2s\" }}\n            ></div>\n          </div>\n          <div className=\"h-2 w-full bg-gray-800 rounded-full overflow-hidden\">\n            <div\n              className=\"h-full bg-blue-500 rounded-full animate-pulse\"\n              style={{ width: \"90%\", animationDelay: \"0.4s\" }}\n            ></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAEA;AAFA;;;;AAIe,SAAS;IACtB,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;sDAAc;;8BACb,8OAAC;8DAAc;;sCACb,8OAAC,iNAAA,CAAA,UAAO;4BACN,WAAU;4BACV,eAAY;;;;;;sCAEd,8OAAC;sEAAc;sCACb,cAAA,8OAAC;0EAAc;;;;;;;;;;;;;;;;;8BAKnB,8OAAC;8DAAa;8BAAwC;;;;;;8BACtD,8OAAC;8DAAY;8BAAqB;;;;;;;;;;8BASlC,8OAAC;8DAAc;;sCACb,8OAAC;sEAAc;sCACb,cAAA,8OAAC;gCAEC,OAAO;oCAAE,OAAO;gCAAM;0EADZ;;;;;;;;;;;sCAId,8OAAC;sEAAc;sCACb,cAAA,8OAAC;gCAEC,OAAO;oCAAE,OAAO;oCAAO,gBAAgB;gCAAO;0EADpC;;;;;;;;;;;sCAId,8OAAC;sEAAc;sCACb,cAAA,8OAAC;gCAEC,OAAO;oCAAE,OAAO;oCAAO,gBAAgB;gCAAO;0EADpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQxB"}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB"}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,sMAAM,UAAU,CAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,yDACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,sMAAM,UAAU,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,sMAAM,UAAU,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,6CAA6C;QAC1D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,sMAAM,UAAU,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,sMAAM,UAAU,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,sMAAM,UAAU,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG"}},
    {"offset": {"line": 277, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 283, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/components/editableTest.tsx"],"sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useRef,\n  SetStateAction,\n  Dispatch,\n} from \"react\";\n\ninterface EditableTextProps {\n  initialText: string;\n  onSave: (text: string) => void;\n  className?: string;\n  mitigation?: boolean;\n  hasChanged: boolean;\n  setHasChanged: Dispatch<SetStateAction<boolean>>;\n}\n\nexport function EditableText({\n  initialText,\n  hasChanged,\n  setHasChanged,\n  mitigation = false,\n  onSave,\n  className = \"\",\n}: EditableTextProps) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [text, setText] = useState(initialText);\n  const textRef = useRef<HTMLDivElement>(null);\n  const cursorPositionRef = useRef<number | null>(null);\n\n  useEffect(() => {\n    if (isEditing && textRef.current) {\n      textRef.current.focus();\n      if (cursorPositionRef.current !== null) {\n        const range = document.createRange();\n        const sel = window.getSelection();\n        range.setStart(\n          textRef.current.childNodes[0] || textRef.current,\n          cursorPositionRef.current\n        );\n        range.collapse(true);\n        sel?.removeAllRanges();\n        sel?.addRange(range);\n      }\n    }\n  }, [isEditing, text]);\n\n  const handleBlur = () => {\n    setIsEditing(false);\n    if (hasChanged) {\n      onSave(text);\n      setHasChanged(false);\n    }\n  };\n\n  const handleInput = (e: React.FormEvent<HTMLDivElement>) => {\n    const newText = e.currentTarget.textContent || \"\";\n    if (newText !== initialText) {\n      setHasChanged(true);\n    } else {\n      setHasChanged(false);\n    }\n    setText(newText);\n    const selection = window.getSelection();\n    if (selection && selection.rangeCount > 0) {\n      const range = selection.getRangeAt(0);\n      cursorPositionRef.current = range.startOffset;\n    }\n  };\n\n  const handleSave = () => {\n    onSave(text);\n    setHasChanged(false);\n  };\n\n  return (\n    <div className=\"relative\">\n      <div\n        ref={textRef}\n        className={`${className} ${\n          isEditing ? \"border border-blue-500 rounded\" : \"\"\n        }`}\n        contentEditable={isEditing}\n        onBlur={handleBlur}\n        onClick={() => setIsEditing(true)}\n        onInput={handleInput}\n        suppressContentEditableWarning={true}\n      >\n        {mitigation ? (\n          <span className=\"font-bold text-white\">Mitigation: </span>\n        ) : (\n          <></>\n        )}\n        {text}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAiBO,SAAS,aAAa,EAC3B,WAAW,EACX,UAAU,EACV,aAAa,EACb,aAAa,KAAK,EAClB,MAAM,EACN,YAAY,EAAE,EACI;IAClB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjC,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAkB;IACvC,MAAM,oBAAoB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAiB;IAEhD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,aAAa,QAAQ,OAAO,EAAE;YAChC,QAAQ,OAAO,CAAC,KAAK;YACrB,IAAI,kBAAkB,OAAO,KAAK,MAAM;gBACtC,MAAM,QAAQ,SAAS,WAAW;gBAClC,MAAM,MAAM,OAAO,YAAY;gBAC/B,MAAM,QAAQ,CACZ,QAAQ,OAAO,CAAC,UAAU,CAAC,EAAE,IAAI,QAAQ,OAAO,EAChD,kBAAkB,OAAO;gBAE3B,MAAM,QAAQ,CAAC;gBACf,KAAK;gBACL,KAAK,SAAS;YAChB;QACF;IACF,GAAG;QAAC;QAAW;KAAK;IAEpB,MAAM,aAAa;QACjB,aAAa;QACb,IAAI,YAAY;YACd,OAAO;YACP,cAAc;QAChB;IACF;IAEA,MAAM,cAAc,CAAC;QACnB,MAAM,UAAU,EAAE,aAAa,CAAC,WAAW,IAAI;QAC/C,IAAI,YAAY,aAAa;YAC3B,cAAc;QAChB,OAAO;YACL,cAAc;QAChB;QACA,QAAQ;QACR,MAAM,YAAY,OAAO,YAAY;QACrC,IAAI,aAAa,UAAU,UAAU,GAAG,GAAG;YACzC,MAAM,QAAQ,UAAU,UAAU,CAAC;YACnC,kBAAkB,OAAO,GAAG,MAAM,WAAW;QAC/C;IACF;IAEA,MAAM,aAAa;QACjB,OAAO;QACP,cAAc;IAChB;IAEA,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,GAAG,UAAU,CAAC,EACvB,YAAY,mCAAmC,IAC/C;YACF,iBAAiB;YACjB,QAAQ;YACR,SAAS,IAAM,aAAa;YAC5B,SAAS;YACT,gCAAgC;;gBAE/B,2BACC,8OAAC;oBAAK,WAAU;8BAAuB;;;;;yCAEvC;gBAED;;;;;;;;;;;;AAIT"}},
    {"offset": {"line": 368, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 422, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/lib/supaBaseClient.ts"],"sourcesContent":["import { createClient } from \"@supabase/supabase-js\";\n\nexport function createSupabaseClient() {\n  const url = process.env.NEXT_PUBLIC_SUPABASE_URL;\n  const key = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n  let client: any;\n\n  if (key && url) client = createClient(url, key);\n\n  return client;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,SAAS;IACd,MAAM;IACN,MAAM;IACN,IAAI;IAEJ,wCAAgB,SAAS,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,KAAK;IAE3C,OAAO;AACT"}},
    {"offset": {"line": 434, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 440, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/components/ui/loader.tsx"],"sourcesContent":["import React from \"react\";\n\ninterface Loader2Props extends React.SVGProps<SVGSVGElement> {\n  size?: number;\n}\n\nexport const Loader2 = ({ size = 24, className, ...props }: Loader2Props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className={`animate-spin ${className}`}\n      {...props}\n    >\n      <path d=\"M21 12a9 9 0 1 1-6.219-8.56\" />\n    </svg>\n  );\n};\n"],"names":[],"mappings":";;;;;AAMO,MAAM,UAAU,CAAC,EAAE,OAAO,EAAE,EAAE,SAAS,EAAE,GAAG,OAAqB;IACtE,qBACE,8OAAC;QACC,OAAM;QACN,OAAO;QACP,QAAQ;QACR,SAAQ;QACR,MAAK;QACL,QAAO;QACP,aAAY;QACZ,eAAc;QACd,gBAAe;QACf,WAAW,CAAC,aAAa,EAAE,WAAW;QACrC,GAAG,KAAK;kBAET,cAAA,8OAAC;YAAK,GAAE;;;;;;;;;;;AAGd"}},
    {"offset": {"line": 471, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 477, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/components/EditableStockData.tsx"],"sourcesContent":["\"use client\";\nimport React, {\n  useState,\n  useEffect,\n  useCallback,\n  useRef,\n  SetStateAction,\n  Dispatch,\n} from \"react\";\nimport {\n  Card,\n  CardDescription,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport type {\n  EditedValType,\n  StockData,\n  TableType,\n} from \"../app/types/StockData\";\nimport { Check, Code, Copy, Link, Share } from \"lucide-react\";\nimport { EditableText } from \"./editableTest\";\nimport { SupabaseClient } from \"@supabase/supabase-js\";\nimport { createSupabaseClient } from \"@/lib/supaBaseClient\";\nimport { Loader2 } from \"@/components/ui/loader\";\n\ninterface StockDataDisplayProps {\n  data: TableType;\n  id: string;\n  userId: string;\n}\n\ninterface Strength {\n  title: string;\n  description: string;\n}\n\nexport function StockDataDisplay({ data, id, userId }: StockDataDisplayProps) {\n  const [client, setClient] = useState<SupabaseClient | null>(null);\n  const [dataSave, setDataSave] = useState<TableType>(data);\n  const [isSaving, setIsSaving] = useState(false);\n  const [cachedData, setCachedData] = useState<TableType | null>(null);\n  const [editedVals, setEditedVals] = useState<EditedValType>({});\n  const [companyDescription, setCompanyDescription] = useState<string>(\"\");\n  const [imageSrc, setImageSrc] = useState<string>(\n    \"https://images.unsplash.com/photo-1456930266018-fda42f7404a7?q=80&w=1595&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n  );\n  const [imageSrc2, setImageSrc2] = useState<string>(\n    \"https://images.unsplash.com/photo-1456930266018-fda42f7404a7?q=80&w=1595&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n  );\n  const [keyMetrics, setKeyMetrics] = useState<\n    Array<{\n      label: string;\n      value: string | number;\n      description: string;\n      name: string;\n    }>\n  >([]);\n  const [financialHealth, setFinancialHealth] = useState<\n    Array<{\n      label: string;\n      value: string | number;\n      description: string;\n      name: string;\n    }>\n  >([]);\n  const [strengthsAndCatalysts, setStrengthsAndCatalysts] = useState<\n    Strength[]\n  >([]);\n  const [analystHealth, setAnalystHealth] = useState<\n    Array<{\n      label: string;\n      value: string | number;\n      description: string;\n      name: string;\n    }>\n  >([]);\n  const [risksAndMitigations, setRisksAndMitigations] = useState<Strength[]>(\n    []\n  );\n  const [conclusion, setConclusion] = useState<string>(\"\");\n  const [loadingStates, setLoadingStates] = useState({\n    companyOverview: true,\n    keyMetrics: true,\n    financialHealth: true,\n    strengthsAndCatalysts: true,\n    analystHealth: true,\n    risksAndMitigations: true,\n    conclusion: true,\n  });\n\n  useEffect(() => {\n    setClient(createSupabaseClient());\n  }, []);\n\n  useEffect(() => {\n    if (!cachedData) {\n      setCachedData(data);\n    }\n  }, [data, cachedData]);\n\n  const fetchCompanyOverview = useCallback(async () => {\n    if (cachedData && client) {\n      try {\n        let { data: companyData, error } = await client\n          .from(\"company\")\n          .select(\"description\")\n          .eq(\"name\", id);\n\n        if (!companyData) {\n          const { data: defaultData, error } = await client\n            .from(\"company\")\n            .select(\"description\")\n            .eq(\"name\", id);\n\n          companyData = defaultData;\n        }\n\n        if (error) throw error;\n\n        if (companyData && companyData.description) {\n          setCompanyDescription(companyData.description);\n          setImageSrc(\n            cachedData.url1 ||\n              \"https://images.unsplash.com/photo-1456930266018-fda42f7404a7?q=80&w=1595&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n          );\n        } else {\n          const desc = await dsc(\n            `Give ${cachedData.name} company's description in 50-70 words`\n          );\n          setCompanyDescription(desc);\n          setImageSrc(\n            cachedData.url1 ||\n              \"https://images.unsplash.com/photo-1456930266018-fda42f7404a7?q=80&w=1595&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n          );\n        }\n      } catch (error) {\n        console.error(\"Error fetching company overview:\", error);\n        const desc = await dsc(\n          `Give ${cachedData.name} company's description in 50-70 words`\n        );\n        setCompanyDescription(desc);\n        setImageSrc(\n          cachedData.url1 ||\n            \"https://images.unsplash.com/photo-1456930266018-fda42f7404a7?q=80&w=1595&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n        );\n      } finally {\n        setLoadingStates((prev) => ({ ...prev, companyOverview: false }));\n      }\n    }\n  }, [cachedData, client, id]);\n\n  const fetchKeyMetrics = useCallback(async () => {\n    if (cachedData && client) {\n      try {\n        let { data: metricsData, error } = await client\n          .from(\"company\")\n          .select(\n            \"marketCap,sharesOutstanding,float,evEbitda,peTtm,dividendRate\"\n          )\n          .eq(\"name\", data.name);\n\n        if (!metricsData) {\n          const { data: defalutData, error } = await client\n            .from(\"company\")\n            .select(\n              \"marketCap,sharesOutstanding,float,evEbitda,peTtm,dividendRate\"\n            )\n            .eq(\"name\", data.name);\n\n          metricsData = defalutData;\n        }\n        if (error) throw error;\n\n        const metricsWithDescriptions = [\n          {\n            label: \"Market Cap\",\n            value: \"$\" + cachedData.marketCap,\n            name: \"marketCap\",\n            description: metricsData?.marketCap,\n          },\n          {\n            label: \"Shares Outstanding\",\n            value: \"$\" + cachedData.sharesOutstanding,\n            name: \"sharesOutstanding\",\n            description: metricsData?.sharesOutstanding,\n          },\n          {\n            label: \"Shares Float\",\n            value: \"$\" + cachedData.float,\n            name: \"float\",\n            description: metricsData?.float,\n          },\n          {\n            label: \"EV/EBITDA\",\n            value: cachedData.evEbitda + \"x\",\n            name: \"evEbitda\",\n            description: metricsData?.evEbitda,\n          },\n          {\n            label: \"P/E\",\n            value: cachedData.peTtm + \"x\",\n            name: \"peTtm\",\n            description: metricsData?.peTtm,\n          },\n          {\n            label: \"Dividend Rate\",\n            value: cachedData.dividendRate + \"x\",\n            name: \"dividendRate\",\n            description: metricsData?.dividendRate,\n          },\n        ];\n\n        const updatedMetrics = await Promise.all(\n          metricsWithDescriptions.map(async (metric) => {\n            let description = metric.description || data[metric.name + \"Dsc\"];\n            if (!description) {\n              const a = await dsc(\n                `Summarize ${metric.label} of ${cachedData.name} in less than 20 words without specifying numbers.`\n              );\n              data[metric.name + \"Dsc\"] = a;\n              description = a;\n            }\n\n            return {\n              ...metric,\n              description,\n            };\n          })\n        );\n\n        // console.log(updatedMetrics);\n        setKeyMetrics(updatedMetrics);\n      } catch (error) {\n        console.error(\"Error fetching key metrics:\", error);\n        setKeyMetrics([]);\n      } finally {\n        setLoadingStates((prev) => ({ ...prev, keyMetrics: false }));\n      }\n    }\n  }, [cachedData, client]);\n\n  const fetchFinancialHealth = useCallback(async () => {\n    if (cachedData && client) {\n      try {\n        let { data: financialData, error } = await client\n          .from(\"company\")\n          .select(\"cashPosition,totalDebt,debtToEquity,currentRatio\")\n          .eq(\"name\", data.name);\n\n        if (!financialData) {\n          const { data: defaultData, error } = await client\n            .from(\"company\")\n            .select(\"cashPosition,totalDebt,debtToEquity,currentRatio\")\n            .eq(\"name\", data.name);\n          financialData = defaultData;\n        }\n\n        if (error) throw error;\n\n        const financialsData = [\n          {\n            label: \"Cash Position\",\n            value: \"$\" + cachedData.cashPosition,\n            name: \"cashPosition\",\n            description: financialData?.cashPositionDsc,\n          },\n          {\n            label: \"Total Debt\",\n            value: \"$\" + cachedData.totalDebt,\n            name: \"totalDebt\",\n            description: financialData?.totalDebtDsc,\n          },\n          {\n            label: \"Debt to Equity\",\n            value: cachedData.debtToEquity + \"x\",\n            name: \"debtToEquity\",\n            description: financialData?.debtToEquityDsc,\n          },\n          {\n            label: \"Current Ratio\",\n            value: cachedData.currentRatio + \"x\",\n            name: \"currentRatio\",\n            description: financialData?.currentRatioDsc,\n          },\n        ];\n\n        const financialsWithDescriptions = await Promise.all(\n          financialsData.map(async (item) => {\n            let description = item.description;\n            if (!description) {\n              const a = await dsc(\n                `summary of ${item.label} of ${cachedData.name} in 20-30 words without the numbers`\n              );\n              data[item.name + \"Dsc\"] = a;\n              description = a;\n            }\n\n            return {\n              ...item,\n              description,\n            };\n          })\n        );\n\n        setFinancialHealth(financialsWithDescriptions);\n      } catch (error) {\n        console.error(\"Error fetching financial health data:\", error);\n        const financialsData = [\n          {\n            label: \"Cash Position\",\n            name: \"cashPosition\",\n            value: \"$\" + cachedData.cashPosition,\n          },\n          {\n            label: \"Total Debt\",\n            name: \"totalDebt\",\n            value: \"$\" + cachedData.totalDebt,\n          },\n          {\n            label: \"Debt to Equity\",\n            name: \"debtToEquity\",\n            value: cachedData.debtToEquity + \"x\",\n          },\n          {\n            label: \"Current Ratio\",\n            name: \"currentRatio\",\n            value: cachedData.currentRatio + \"x\",\n          },\n        ];\n\n        const financialsWithDescriptions = await Promise.all(\n          financialsData.map(async (item) => {\n            const description = await dsc(\n              `summary of ${item.label} of ${cachedData.name} in 20-30 words without the numbers`\n            );\n            data[item.name + \"Dsc\"] = description;\n\n            return {\n              ...item,\n              description,\n            };\n          })\n        );\n\n        setFinancialHealth(financialsWithDescriptions);\n      } finally {\n        setLoadingStates((prev) => ({ ...prev, financialHealth: false }));\n      }\n    }\n  }, [cachedData, client]);\n\n  const fetchStrengthsAndCatalysts = useCallback(async () => {\n    if (cachedData && client) {\n      try {\n        let { data: strengthsData, error } = await client\n          .from(\"company\")\n          .select(\"strengthsAndCatalysts\")\n          .eq(\"name\", `${userId}-${data.name}`);\n\n        if (!strengthsData) {\n          const { data: defaultData, error: defaultError } = await client\n            .from(\"company\")\n            .select(\"strengthsAndCatalysts\")\n            .eq(\"name\", data.name);\n\n          if (defaultError) throw defaultError;\n          strengthsData = defaultData;\n        }\n\n        if (strengthsData && strengthsData.strengthsAndCatalysts) {\n          setStrengthsAndCatalysts(\n            parsePoints(strengthsData.strengthsAndCatalysts)\n          );\n        } else {\n          const strengthsText = await dsc(\n            `Give me growth catalysts of ${cachedData.name} stock, give me 6 points, with headings, and description not more than 40 words`\n          );\n          setStrengthsAndCatalysts(parsePoints(strengthsText));\n        }\n      } catch (error) {\n        console.error(\"Error fetching strengths and catalysts:\", error);\n        const strengthsText = await dsc(\n          `Give me growth catalysts of ${cachedData.name} stock, give me 6 points, with headings, and description not more than 40 words`\n        );\n        setStrengthsAndCatalysts(parsePoints(strengthsText));\n      } finally {\n        setLoadingStates((prev) => ({\n          ...prev,\n          strengthsAndCatalysts: false,\n        }));\n      }\n    }\n  }, [cachedData, client, data.name, userId]);\n\n  const fetchAnalystHealth = useCallback(async () => {\n    if (cachedData && client) {\n      try {\n        let { data: analystData, error } = await client\n          .from(\"company\")\n          .select(\n            \"analystRating,numberOfAnalysts,meanTargetPrice,impliedChange\"\n          )\n          .eq(\"name\", data.name);\n\n        if (!analystData) {\n          const { data: defaultData, error } = await client\n            .from(\"company\")\n            .select(\n              \"analystRating,numberOfAnalysts,meanTargetPrice,impliedChange\"\n            )\n            .eq(\"name\", data.name);\n\n          analystData = defaultData;\n        }\n\n        if (error) throw error;\n\n        const analystInfo = [\n          {\n            label: \"Analyst Rating (1-5)\",\n            value: cachedData.analystRating,\n            name: \"analystRating\",\n            description: analystData?.analystRating,\n          },\n          {\n            label: \"Number of Analysts\",\n            value: cachedData.numberOfAnalysts,\n            name: \"numberOfAnalysts\",\n            description: analystData?.numberOfAnalysts,\n          },\n          {\n            label: \"Mean Target Price\",\n            value: \"$\" + cachedData.meanTargetPrice,\n            name: \"meanTargetPrice\",\n            description: analystData?.meanTargetPrice,\n          },\n          {\n            label: \"Implied +/-\",\n            value: cachedData.impliedChange,\n            name: \"impliedChange\",\n            description: analystData?.impliedChange,\n          },\n        ];\n\n        const analystDataWithDescriptions = await Promise.all(\n          analystInfo.map(async (item) => {\n            let description = item.description;\n            if (!description) {\n              const a = await dsc(\n                `summary of ${item.label} of ${cachedData.name} in 20-30 words without the numbers`\n              );\n              data[item.name + \"Dsc\"] = a;\n              description = a;\n            }\n\n            return {\n              ...item,\n              description,\n            };\n          })\n        );\n        setAnalystHealth(analystDataWithDescriptions);\n      } catch (error) {\n        console.error(\"Error fetching analyst health:\", error);\n        setAnalystHealth([]);\n      } finally {\n        setLoadingStates((prev) => ({ ...prev, analystHealth: false }));\n      }\n    }\n  }, [cachedData, client]);\n\n  const fetchRisksAndMitigations = useCallback(async () => {\n    if (cachedData && client) {\n      try {\n        let { data: risksData, error } = await client\n          .from(\"company\")\n          .select(\"risksAndMitigation\")\n          .eq(\"name\", `${userId}-${data.name}`);\n\n        if (!risksData) {\n          const { data: defaultData, error: defaultError } = await client\n            .from(\"company\")\n            .select(\"risksAndMitigation\")\n            .eq(\"name\", data.name);\n\n          if (defaultError) throw defaultError;\n          risksData = defaultData;\n        }\n\n        if (risksData && risksData.risksAndMitigation) {\n          setRisksAndMitigations(\n            parseRisksAndMitigations(risksData.risksAndMitigation)\n          );\n        } else {\n          const risksText = await dsc(\n            `Give me 6 Risks with explanation and also their mitigations respectively of ${cachedData.name} stock with headings and description of not more than 20 words for each`\n          );\n          setRisksAndMitigations(parseRisksAndMitigations(risksText));\n        }\n      } catch (error) {\n        console.error(\"Error fetching risks and mitigations:\", error);\n        const risksText = await dsc(\n          `Give me 6 Risks with explanation and also their mitigations respectively of ${cachedData.name} stock with headings and description of not more than 20 words for each`\n        );\n        setRisksAndMitigations(parseRisksAndMitigations(risksText));\n      } finally {\n        setLoadingStates((prev) => ({\n          ...prev,\n          risksAndMitigations: false,\n        }));\n      }\n    }\n  }, [cachedData, client, data.name, userId]);\n\n  const fetchConclusion = useCallback(async () => {\n    if (cachedData && client) {\n      try {\n        let { data: conclusionData, error } = await client\n          .from(\"company\")\n          .select(\"conclusion\")\n          .eq(\"name\", `${userId}-${data.name}`);\n\n        if (!conclusionData) {\n          const { data: defaultData, error } = await client\n            .from(\"company\")\n            .select(\"conclusion\")\n            .eq(\"name\", data.name);\n\n          conclusionData = defaultData;\n        }\n\n        if (error) throw error;\n\n        if (conclusionData && conclusionData.conclusion) {\n          setConclusion(conclusionData.conclusion);\n          setImageSrc2(\n            data.url2 ||\n              \"https://images.unsplash.com/photo-1456930266018-fda42f7404a7?q=80&w=1595&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n          );\n        } else {\n          const conclusionText = await dsc(\n            `With this info ${JSON.stringify(\n              cachedData\n            )} give a 70-100 words conclusion which include should we buy it or not?.`\n          );\n          setConclusion(conclusionText);\n          setImageSrc2(\n            data.url2 ||\n              \"https://images.unsplash.com/photo-1456930266018-fda42f7404a7?q=80&w=1595&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n          );\n        }\n      } catch (error) {\n        console.error(\"Error fetching conclusion:\", error);\n        const conclusionText = await dsc(\n          `With this info ${JSON.stringify(\n            cachedData\n          )} give a 70-100 words conclusion which include should we buy it or not?.`\n        );\n        setConclusion(conclusionText);\n        setImageSrc2(\n          data.url2 ||\n            \"https://images.unsplash.com/photo-1456930266018-fda42f7404a7?q=80&w=1595&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n        );\n      } finally {\n        setLoadingStates((prev) => ({ ...prev, conclusion: false }));\n      }\n    }\n  }, [cachedData, client, data.url2]);\n\n  async function saveEditedContent() {\n    setIsSaving(true);\n    try {\n      const updatedData: TableType = {\n        ticker: id,\n        ...dataSave,\n        ...editedVals,\n        name: id, // Ensure the name field is set to the id\n      };\n\n      if (client) {\n        console.log(\"Saving updated data:\", updatedData);\n        const { data: serverData, error } = await client\n          .from(\"company\")\n          .upsert(updatedData)\n          .select();\n\n        if (error) {\n          throw error;\n        }\n\n        console.log(\"Server response:\", serverData);\n        setCachedData(updatedData);\n        setDataSave(updatedData);\n        setEditedVals({}); // Clear editedVals after successful save\n      } else {\n        throw new Error(\"Supabase client is not initialized\");\n      }\n    } catch (error) {\n      console.error(\"Error saving content:\", error);\n    } finally {\n      setIsSaving(false);\n    }\n  }\n  async function savePoints(section: string, content: string): Promise<void> {\n    setIsSaving(true);\n    try {\n      const [col, type, index] = section.split(\"-\");\n\n      const updatedData = {\n        ...dataSave,\n        [col]: updateNestedStructure(dataSave[col], index, type, content),\n      };\n\n      if (client) {\n        const { data: serverData, error } = await client\n          .from(\"company\")\n          .upsert({ ticker: id, ...updatedData })\n          .select();\n\n        if (error) {\n          throw error;\n        }\n        setDataSave(updatedData);\n      }\n    } catch (error) {\n      console.error(\"Error saving points:\", error);\n    } finally {\n      setIsSaving(false);\n    }\n  }\n  function updateNestedStructure(\n    data: string,\n    index: string,\n    type: string,\n    content: string\n  ): string {\n    const lines = data.split(\"\\n\");\n    const targetIndex = lines.findIndex((line) => line.startsWith(`${index}:`));\n\n    if (targetIndex === -1) return data;\n\n    if (type === \"title\") {\n      lines[targetIndex] = `${index}: ${content}`;\n    } else if (type === \"description\") {\n      if (targetIndex + 1 < lines.length) {\n        lines[targetIndex + 1] = content;\n      }\n    }\n\n    return lines.join(\"\\n\");\n  }\n\n  useEffect(() => {\n    if (cachedData) {\n      fetchCompanyOverview();\n      fetchKeyMetrics();\n      fetchFinancialHealth();\n      fetchStrengthsAndCatalysts();\n      fetchAnalystHealth();\n      fetchRisksAndMitigations();\n      fetchConclusion();\n    }\n  }, [\n    cachedData,\n    fetchCompanyOverview,\n    fetchKeyMetrics,\n    fetchFinancialHealth,\n    fetchStrengthsAndCatalysts,\n    fetchAnalystHealth,\n    fetchRisksAndMitigations,\n    fetchConclusion,\n  ]);\n\n  useEffect(() => {\n    console.log(\"editedVals updated:\", editedVals);\n  }, [editedVals]);\n\n  if (!cachedData) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"m-0 p-0\">\n      {isSaving && <LoadingOverlay />}\n      <ShareButton userId={userId} id={id} />\n      <div className=\"h-full flex flex-col gap-10 p-10 items-center justify-center bg-slate-900\">\n        {loadingStates.companyOverview ? (\n          <LoadingCard />\n        ) : (\n          <CompanyOverview\n            setEditedVals={setEditedVals}\n            editedVals={editedVals}\n            saveEditedContent={saveEditedContent}\n            name={cachedData?.name || \"\"}\n            description={companyDescription}\n            imageSrc={imageSrc}\n          />\n        )}\n        {loadingStates.keyMetrics ? (\n          <LoadingCard />\n        ) : (\n          <KeyMetrics\n            setEditedVals={setEditedVals}\n            editedVals={editedVals}\n            saveEditedContent={saveEditedContent}\n            metrics={keyMetrics}\n          />\n        )}\n        {loadingStates.financialHealth ? (\n          <LoadingCard />\n        ) : (\n          <FinancialHealth\n            setEditedVals={setEditedVals}\n            editedVals={editedVals}\n            saveEditedContent={saveEditedContent}\n            financials={financialHealth}\n          />\n        )}\n        {loadingStates.strengthsAndCatalysts ? (\n          <LoadingCard />\n        ) : (\n          <StrengthsAndCatalysts\n            savePoints={savePoints}\n            strengths={strengthsAndCatalysts}\n          />\n        )}\n        {loadingStates.analystHealth ? (\n          <LoadingCard />\n        ) : (\n          <AnalystHealth\n            setEditedVals={setEditedVals}\n            editedVals={editedVals}\n            saveEditedContent={saveEditedContent}\n            analystData={analystHealth}\n          />\n        )}\n        {loadingStates.risksAndMitigations ? (\n          <LoadingCard />\n        ) : (\n          <RisksAnalysis savePoints={savePoints} points={risksAndMitigations} />\n        )}\n        {loadingStates.conclusion ? (\n          <LoadingCard />\n        ) : (\n          <Conclusion\n            setEditedVals={setEditedVals}\n            editedVals={editedVals}\n            saveEditedContent={saveEditedContent}\n            description={conclusion}\n            imageSrc={imageSrc2}\n            rec={data.recommendation}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction CompanyOverview({\n  name,\n  description,\n  imageSrc,\n  saveEditedContent,\n  setEditedVals,\n  editedVals,\n}: {\n  name: string;\n  description: string;\n  imageSrc: string;\n  saveEditedContent: () => void;\n  editedVals: EditedValType;\n  setEditedVals: Dispatch<SetStateAction<EditedValType>>;\n}) {\n  return (\n    <Card className=\"flex w-[80vw] h-[75vh] bg-zinc-900 shadow-2xl shadow-cyan-400 text-white border-0\">\n      <CardHeader className=\"flex-1 p-16 justify-center\">\n        <CardTitle className=\"barlow-bolds text-5xl pb-3 font-bold text-white bg-gradient-to-r from-purple-400 via-blue-500 to-indigo-400 inline-block text-transparent bg-clip-text\">\n          {name}\n        </CardTitle>\n        <EditableText\n          initialText={description}\n          onSave={(newText) => {\n            setEditedVals((prev) => ({ ...prev, description: newText }));\n            saveEditedContent();\n          }}\n          className=\"montserrat text-xl text-white\"\n        />\n      </CardHeader>\n      <CardHeader className=\"w-5/12 p-0 relative overflow-hidden items-center justify-center\">\n        <CardDescription className=\"text-center overflow-hidden h-full w-full text-gray-400\">\n          <img\n            className=\"object-cover w-full h-full rounded-r-lg\"\n            src={imageSrc || \"/placeholder.svg\"}\n            alt={`${name} visual representation`}\n          />\n        </CardDescription>\n      </CardHeader>\n    </Card>\n  );\n}\n\nfunction KeyMetrics({\n  metrics,\n  saveEditedContent,\n  setEditedVals,\n  editedVals,\n}: {\n  metrics: Array<{\n    label: string;\n    value: string | number;\n    description: string;\n    name: string;\n  }>;\n  saveEditedContent: () => void;\n  editedVals: EditedValType;\n  setEditedVals: Dispatch<SetStateAction<EditedValType>>;\n}) {\n  return (\n    <Card className=\"flex w-[80vw] h-[75vh] pt-8 pb-8 bg-zinc-900 shadow-2xl shadow-cyan-400 text-gray-100 border-0 overflow-hidden\">\n      <CardHeader className=\"flex-1 p-16 items-center justify-center\">\n        <CardTitle className=\"barlow-bold text-3xl font-bold text-white bg-gradient-to-r from-purple-400 via-blue-500 to-indigo-400 inline-block text-transparent bg-clip-text\">\n          Key Market Metrics: Reflecting Value and Potential\n        </CardTitle>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {metrics.map((metric) => (\n            <div\n              key={metric.label}\n              className=\"montserrat p-6 bg-gray-800 rounded-md text-center\"\n            >\n              <EditableText\n                initialText={metric.value.toString()}\n                onSave={(newText) => {\n                  setEditedVals((prev) => ({\n                    ...prev,\n                    [metric.name]: newText,\n                  }));\n                  saveEditedContent();\n                }}\n                className=\"text-xl font-bold\"\n              />\n              <p className=\"text-base font-semibold mt-2\">{metric.label}</p>\n              <EditableText\n                initialText={metric.description}\n                onSave={(newText) => {\n                  setEditedVals((prev) => ({\n                    ...prev,\n                    [metric.name + \"Dsc\"]: newText,\n                  }));\n                  saveEditedContent();\n                }}\n                className=\"text-xs mt-2 text-gray-400\"\n              />\n            </div>\n          ))}\n        </div>\n      </CardHeader>\n    </Card>\n  );\n}\n\nfunction FinancialHealth({\n  financials,\n  saveEditedContent,\n  setEditedVals,\n  editedVals,\n}: {\n  financials: Array<{\n    label: string;\n    value: string | number;\n    description: string;\n    name: string;\n  }>;\n  saveEditedContent: () => void;\n  editedVals: EditedValType;\n  setEditedVals: Dispatch<SetStateAction<EditedValType>>;\n}) {\n  return (\n    <Card className=\"flex w-[80vw] h-[75vh] bg-zinc-900 shadow-2xl shadow-cyan-400 text-gray-100 border-0\">\n      <CardHeader className=\"flex-1 p-16 items-center justify-center\">\n        <CardTitle className=\"barlow-bold text-3xl font-bold pb-6 text-white bg-gradient-to-r from-purple-400 via-blue-500 to-indigo-400 inline-block text-transparent bg-clip-text\">\n          Financial Health\n        </CardTitle>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {financials.map((item) => (\n            <div\n              key={item.label}\n              className=\"montserrat p-6 bg-gray-800 rounded-md text-center\"\n            >\n              <EditableText\n                initialText={item.value.toString()}\n                onSave={(newText) => {\n                  setEditedVals((prev) => ({ ...prev, [item.name]: newText }));\n                  saveEditedContent();\n                }}\n                className=\"text-xl font-bold\"\n              />\n              <p className=\"text-base font-semibold mt-2\">{item.label}</p>\n              <EditableText\n                initialText={item.description}\n                onSave={(newText) => {\n                  setEditedVals((prev) => ({\n                    ...prev,\n                    [item.name + \"Dsc\"]: newText,\n                  }));\n                  saveEditedContent();\n                }}\n                className=\"text-xs mt-2 text-gray-400\"\n              />\n            </div>\n          ))}\n        </div>\n      </CardHeader>\n    </Card>\n  );\n}\n\nfunction StrengthsAndCatalysts({\n  strengths,\n  savePoints,\n}: {\n  strengths: Strength[];\n  savePoints: (a: string, b: string) => Promise<void>;\n}) {\n  return (\n    <Card className=\"flex flex-col w-[80vw] overflow-hidden h-[75vh] bg-zinc-900 shadow-2xl shadow-cyan-400 text-gray-100 border-0\">\n      <CardHeader className=\"flex-1 items-center justify-center\">\n        <CardTitle className=\"barlow-bold text-3xl font-bold text-white bg-gradient-to-r from-purple-400 via-blue-500 to-indigo-400 inline-block text-transparent bg-clip-text\">\n          Strengths and Catalysts for Continued Success\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {strengths.map((strength, index) => (\n            <Card\n              key={index}\n              className=\"montserrat bg-gray-800 border-0 rounded-lg pt-6 shadow-md\"\n            >\n              <CardContent className=\"flex gap-9 items-start space-x-3\">\n                <div>\n                  <div className=\"w-[4px] h-[15px] mt-1.5 absolute bg-purple-400 rounded-full \"></div>\n                  <CardTitle className=\"text-lg pl-3 font-semibold text-white\">\n                    <EditableText\n                      initialText={strength.title}\n                      onSave={(newText) =>\n                        savePoints(\n                          `strengthsAndCatalysts-title-${index}`,\n                          newText\n                        )\n                      }\n                      className=\"text-lg font-semibold text-white\"\n                    />\n                  </CardTitle>\n                  <EditableText\n                    initialText={strength.description}\n                    onSave={(newText) =>\n                      savePoints(\n                        `strengthsAndCatalysts-description-${index}`,\n                        newText\n                      )\n                    }\n                    className=\"text-sm text-gray-300 mt-2\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction AnalystHealth({\n  analystData,\n  saveEditedContent,\n  setEditedVals,\n  editedVals,\n}: {\n  analystData: Array<{\n    label: string;\n    value: string | number;\n    description: string;\n    name: string;\n  }>;\n  saveEditedContent: () => void;\n  editedVals: EditedValType;\n  setEditedVals: Dispatch<SetStateAction<EditedValType>>;\n}) {\n  return (\n    <Card className=\"flex w-[80vw] h-[75vh] bg-zinc-900 shadow-2xl shadow-cyan-400 text-gray-100 border-0\">\n      <CardHeader className=\"flex-1 p-16 items-center justify-center\">\n        <CardTitle className=\"barlow-bold text-3xl pb-6 font-bold text-white bg-gradient-to-r from-purple-400 via-blue-500 to-indigo-400 inline-block text-transparent bg-clip-text\">\n          Analyst Health\n        </CardTitle>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {analystData.map((item) => (\n            <div\n              key={item.label}\n              className=\"montserrat p-6 bg-gray-800 rounded-md text-center\"\n            >\n              <EditableText\n                initialText={item.value.toString()}\n                onSave={(newText) => {\n                  setEditedVals((prev) => ({ ...prev, [item.name]: newText }));\n                  saveEditedContent();\n                }}\n                className=\"text-xl font-bold\"\n              />\n              <p className=\"text-base font-semibold mt-2\">{item.label}</p>\n              <EditableText\n                initialText={item.description}\n                onSave={(newText) => {\n                  setEditedVals((prev) => ({\n                    ...prev,\n                    [item.name + \"Dsc\"]: newText,\n                  }));\n                  saveEditedContent();\n                }}\n                className=\"text-xs mt-2 text-gray-400\"\n              />\n            </div>\n          ))}\n        </div>\n      </CardHeader>\n    </Card>\n  );\n}\n\nfunction RisksAnalysis({\n  points,\n  savePoints,\n}: {\n  points: Strength[];\n  savePoints: (a: string, b: string) => void;\n}) {\n  return (\n    <Card className=\"flex flex-col w-[80vw] h-[75vh] bg-zinc-900 shadow-2xl shadow-cyan-400 text-gray-100 border-0 overflow-hidden\">\n      <CardHeader className=\"flex-1 p-3 items-center justify-center\">\n        <CardTitle className=\"barlow-bold text-3xl font-bold text-white bg-gradient-to-r from-purple-400 via-blue-500 to-indigo-400 inline-block text-transparent bg-clip-text\">\n          Risks and Mitigations\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 pb-6\">\n          {points.map((point, index) => (\n            <Card\n              key={index}\n              className=\"montserrat bg-gray-800 border-0 rounded-lg pt-6 shadow-md\"\n            >\n              <CardContent className=\"flex items-start space-x-3\">\n                <div>\n                  <div className=\"w-[4px] h-[15px] mt-1.5 absolute bg-purple-400 rounded-full \"></div>\n                  <CardTitle className=\"flex pl-3 gap-2 text-lg font-semibold text-white\">\n                    <EditableText\n                      initialText={point.title}\n                      onSave={(newText) =>\n                        savePoints(\n                          `risksAndMitigations-title-${index}`,\n                          newText\n                        )\n                      }\n                      className=\"text-lg font-semibold text-white\"\n                    />\n                  </CardTitle>\n                  {point.description.split(\"Mitigation:\").map((part, i) => (\n                    <React.Fragment key={i}>\n                      {i === 0 ? (\n                        <EditableText\n                          initialText={part}\n                          onSave={(newText) =>\n                            savePoints(\n                              `risksAndMitigations-description-${index}-risk`,\n                              newText\n                            )\n                          }\n                          className=\"text-sm text-gray-300 mt-2\"\n                        />\n                      ) : (\n                        <>\n                          <EditableText\n                            initialText={part}\n                            onSave={(newText) =>\n                              savePoints(\n                                `risksAndMitigations-description-${index}-mitigation`,\n                                newText\n                              )\n                            }\n                            className=\"text-sm text-gray-300 mt-2\"\n                            mitigation={true}\n                          />\n                        </>\n                      )}\n                    </React.Fragment>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction Conclusion({\n  description,\n  imageSrc,\n  saveEditedContent,\n  rec,\n  setEditedVals,\n  editedVals,\n}: {\n  description: string;\n  imageSrc: string;\n  saveEditedContent: () => void;\n  editedVals: EditedValType;\n  setEditedVals: Dispatch<SetStateAction<EditedValType>>;\n  rec: string;\n}) {\n  return (\n    <Card className=\"flex w-[80vw] h-[75vh] bg-zinc-900 shadow-2xl shadow-cyan-400 text-gray-100 border-0\">\n      <CardHeader className=\"w-1/3 p-0 relative overflow-hidden items-center justify-center\">\n        <CardDescription className=\"text-center overflow-hidden h-full w-full text-gray-400\">\n          <img\n            className=\"object-cover h-full rounded-l-lg\"\n            src={imageSrc || \"/placeholder.svg\"}\n          />\n        </CardDescription>\n      </CardHeader>\n      <CardHeader className=\"flex-1 p-16 items-center justify-center\">\n        <CardTitle className=\"barlow-bold text-right text-4xl pb-3 font-bold text-white bg-gradient-to-r from-purple-400 via-blue-500 to-indigo-400 inline-block text-transparent bg-clip-text\">\n          Conclusion\n        </CardTitle>\n        <EditableText\n          initialText={description}\n          onSave={(newText) => {\n            setEditedVals({ ...editedVals, conclusion: newText });\n            saveEditedContent();\n          }}\n          className=\"montserrat text-xl text-center text-white\"\n        />\n        <div className=\"flex\">\n          <span className=\"font-bold text-white barlow-bold text-2xl\">\n            Recommendation:{\" \"}\n          </span>\n          <EditableText\n            initialText={rec}\n            onSave={(newText) => {\n              setEditedVals({ ...editedVals, recommendation: newText });\n              saveEditedContent();\n            }}\n            className=\"montserrat text-2xl\"\n          />\n        </div>\n      </CardHeader>\n    </Card>\n  );\n}\n\nasync function dsc(_prompt: string) {\n  const data = { prompt: _prompt };\n  const res = await fetch(\"/api/prompt\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  });\n  const response = await res.text();\n  const obj = JSON.parse(response);\n  return obj.response;\n}\n\nfunction parsePoints(text: string): Strength[] {\n  const strengths: Strength[] = [];\n  const parts = text.split(/\\d+\\./).slice(1);\n\n  for (const part of parts) {\n    const [title, ...descriptionParts] = part.split(\":\");\n    const description = descriptionParts.join(\":\").trim();\n    if (title && description) {\n      strengths.push({\n        title: title.trim(),\n        description: description.replace(/\\.$/, \"\"),\n      });\n    }\n  }\n\n  return strengths;\n}\n\nfunction parseRisksAndMitigations(text: string): Strength[] {\n  const risks: Strength[] = [];\n  const parts = text.split(/\\d+\\./).slice(1);\n\n  for (const part of parts) {\n    const [title, ...descriptionParts] = part.split(\":\");\n    const fullDescription = descriptionParts.join(\":\").trim();\n    const [risk, mitigation] = fullDescription.split(\"Mitigation:\");\n\n    if (title && risk) {\n      risks.push({\n        title: title.trim(),\n        description: `${risk.trim()}\\nMitigation:${\n          mitigation ? mitigation.trim() : \"Not provided\"\n        }`,\n      });\n    }\n  }\n\n  return risks;\n}\n\nfunction LoadingCard() {\n  return (\n    <Card className=\"flex w-[80vw] h-[75vh] bg-zinc-900 shadow-2xl shadow-cyan-400 text-gray-100 border-0 items-center justify-center\">\n      <CardContent>\n        <Loader2 className=\"w-16 h-16 text-blue-500\" />\n      </CardContent>\n    </Card>\n  );\n}\n\nexport function ShareButton({ id, userId }: { id: string; userId: string }) {\n  const [isToastVisible, setIsToastVisible] = useState(false);\n\n  const toggleToast = () => {\n    setIsToastVisible(!isToastVisible);\n  };\n\n  return (\n    <div className=\"fixed top-5 right-5 z-50\">\n      <button\n        className=\"text-white transition-all duration-300 hover:scale-110 active:scale-90 bg-black p-4 rounded-full shadow-md shadow-cyan-400\"\n        onClick={toggleToast}\n        aria-label=\"Share\"\n      >\n        <Share className=\"text-white w-6 h-6\" />\n      </button>\n      {isToastVisible && (\n        <Toast\n          viewLink={`https://stock-gen.vercel.app/viewOnlyPpt/${userId}/${id}`}\n          editableLink={`https://stock-gen.vercel.app/pptDisplay/${id}`}\n        />\n      )}\n    </div>\n  );\n}\n\nexport function Toast({\n  viewLink,\n  editableLink,\n}: {\n  viewLink: string;\n  editableLink: string;\n}) {\n  const [viewCopied, setViewCopied] = useState(false);\n  const [editableCopied, setEditableCopied] = useState(false);\n  const viewLinkRef = useRef<HTMLParagraphElement>(null);\n  const editableLinkRef = useRef<HTMLParagraphElement>(null);\n\n  const copyToClipboard = async (\n    text: string,\n    setCopied: React.Dispatch<React.SetStateAction<boolean>>\n  ) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error(\"Failed to copy text: \", err);\n    }\n  };\n\n  return (\n    <div className=\"z-[100] absolute top-16 right-0 bg-slate-800 text-white p-4 rounded-lg shadow-lg w-72\">\n      <h3 className=\"text-2xl font-semibold mb-3\">Share Links</h3>\n      <div className=\"space-y-3\">\n        <div>Viewable Only:</div>\n        <div className=\"flex items-center justify-between bg-slate-700 rounded p-2\">\n          <div className=\"flex items-center space-x-2 flex-1 min-w-0\">\n            <Link className=\"w-4 h-4 flex-shrink-0\" />\n            <p ref={viewLinkRef} className=\"truncate text-sm\">\n              {viewLink}\n            </p>\n          </div>\n          <button\n            onClick={() => copyToClipboard(viewLink, setViewCopied)}\n            className=\"ml-2 p-1 hover:bg-slate-600 rounded transition-colors duration-200\"\n            aria-label=\"Copy view link\"\n          >\n            {viewCopied ? (\n              <Check className=\"w-4 h-4 text-green-400\" />\n            ) : (\n              <Copy className=\"w-4 h-4\" />\n            )}\n          </button>\n        </div>\n        <div>Editable:</div>\n        <div className=\"flex items-center justify-between bg-slate-700 rounded p-2\">\n          <div className=\"flex items-center space-x-2 flex-1 min-w-0\">\n            <Code className=\"w-4 h-4 flex-shrink-0\" />\n            <p ref={editableLinkRef} className=\"truncate text-sm\">\n              {editableLink}\n            </p>\n          </div>\n          <button\n            onClick={() => copyToClipboard(editableLink, setEditableCopied)}\n            className=\"ml-2 p-1 hover:bg-slate-600 rounded transition-colors duration-200\"\n            aria-label=\"Copy editable link\"\n          >\n            {editableCopied ? (\n              <Check className=\"w-4 h-4 text-green-400\" />\n            ) : (\n              <Copy className=\"w-4 h-4\" />\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction LoadingOverlay() {\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white p-4 rounded-lg flex items-center space-x-2\">\n        <Loader2 className=\"text-blue-500\" />\n        <span className=\"text-gray-800\">Saving...</span>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2042, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2048, "column": 0}, "map": {"version":3,"sources":["file:///home/siddharth/Downloads/Programming/pptgen%20%281%29/src/app/pptDisplay/%5Bid%5D/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"next/navigation\";\nimport Loading from \"@/components/fancy-dark-loading\";\nimport { StockDataDisplay } from \"@/components/EditableStockData\";\nimport type { StockData } from \"../../types/StockData\";\nimport { createSupabaseClient } from \"@/lib/supaBaseClient\";\nimport { SupabaseClient } from \"@supabase/supabase-js\";\n\nexport default function Page() {\n  const [stockData, setStockData] = useState<StockData | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [userId, setUserId] = useState(\"\");\n  const [error, setError] = useState<string | null>(null);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const supabase: SupabaseClient = createSupabaseClient();\n    const loadStockData = async () => {\n      try {\n        setIsLoading(true);\n        const userid = (await supabase.auth.getUser()).data.user?.email;\n        if (userid) setUserId(userid);\n        const fetchStockData = async (id: string) => {\n          const response = await fetch(\"/api/stock\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ ticker: id }),\n          });\n          if (!response.ok) {\n            throw new Error(\"Failed to fetch stock data\");\n          }\n          return await response.json();\n        };\n\n        const data: StockData = await fetchStockData(id);\n\n        const { data: url1, error: err1 } = await supabase\n          .from(\"company\")\n          .select(\"url1\")\n          .single();\n        const { data: url2, error: err2 } = await supabase\n          .from(\"company\")\n          .select(\"url2\")\n          .single();\n\n        // if (!url1) data.url1 = await getImage(data.name);\n        // else data.url1 = url1.url1;\n        // if (!url2) data.url2 = await getImage(data.name);\n        // else data.url2 = url2.url2;\n\n        setStockData(data);\n      } catch (err) {\n        setError(\n          err instanceof Error ? err.message : \"Failed to load stock data\"\n        );\n        console.error(\"Error loading stock data:\", err);\n      }\n      setIsLoading(false);\n    };\n\n    loadStockData();\n  }, [id]);\n\n  if (isLoading) return <Loading />;\n  if (error) return <div className=\"text-red-500\">{error}</div>;\n  if (!stockData) return <div>No data available</div>;\n\n  return <StockDataDisplay userId={userId} id={id} data={stockData} />;\n}\n\n// async function getImage(_name: string) {\n//   const data = { stockName: _name };\n//   const res = await fetch(\"/api/image\", {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify(data),\n//   });\n//   const response = await res.json();\n//   return response.imageUrl;\n// }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AAEA;AAPA;;;;;;;AAUe,SAAS;IACtB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAoB;IAC7D,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACrC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,EAAE,EAAE,EAAE,GAAG,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IAEvB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,WAA2B,CAAA,GAAA,4HAAA,CAAA,uBAAoB,AAAD;QACpD,MAAM,gBAAgB;YACpB,IAAI;gBACF,aAAa;gBACb,MAAM,SAAS,CAAC,MAAM,SAAS,IAAI,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE;gBAC1D,IAAI,QAAQ,UAAU;gBACtB,MAAM,iBAAiB,OAAO;oBAC5B,MAAM,WAAW,MAAM,MAAM,cAAc;wBACzC,QAAQ;wBACR,SAAS;4BACP,gBAAgB;wBAClB;wBACA,MAAM,KAAK,SAAS,CAAC;4BAAE,QAAQ;wBAAG;oBACpC;oBACA,IAAI,CAAC,SAAS,EAAE,EAAE;wBAChB,MAAM,IAAI,MAAM;oBAClB;oBACA,OAAO,MAAM,SAAS,IAAI;gBAC5B;gBAEA,MAAM,OAAkB,MAAM,eAAe;gBAE7C,MAAM,EAAE,MAAM,IAAI,EAAE,OAAO,IAAI,EAAE,GAAG,MAAM,SACvC,IAAI,CAAC,WACL,MAAM,CAAC,QACP,MAAM;gBACT,MAAM,EAAE,MAAM,IAAI,EAAE,OAAO,IAAI,EAAE,GAAG,MAAM,SACvC,IAAI,CAAC,WACL,MAAM,CAAC,QACP,MAAM;gBAET,oDAAoD;gBACpD,8BAA8B;gBAC9B,oDAAoD;gBACpD,8BAA8B;gBAE9B,aAAa;YACf,EAAE,OAAO,KAAK;gBACZ,SACE,eAAe,QAAQ,IAAI,OAAO,GAAG;gBAEvC,QAAQ,KAAK,CAAC,6BAA6B;YAC7C;YACA,aAAa;QACf;QAEA;IACF,GAAG;QAAC;KAAG;IAEP,IAAI,WAAW,qBAAO,8OAAC,8IAAA,CAAA,UAAO;;;;;IAC9B,IAAI,OAAO,qBAAO,8OAAC;QAAI,WAAU;kBAAgB;;;;;;IACjD,IAAI,CAAC,WAAW,qBAAO,8OAAC;kBAAI;;;;;;IAE5B,qBAAO,8OAAC,uIAAA,CAAA,mBAAgB;QAAC,QAAQ;QAAQ,IAAI;QAAI,MAAM;;;;;;AACzD,EAEA,2CAA2C;CAC3C,uCAAuC;CACvC,4CAA4C;CAC5C,sBAAsB;CACtB,iBAAiB;CACjB,4CAA4C;CAC5C,SAAS;CACT,kCAAkC;CAClC,QAAQ;CACR,uCAAuC;CACvC,8BAA8B;CAC9B,IAAI"}},
    {"offset": {"line": 2151, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}